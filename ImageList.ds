/*
 * Author       : latha.p_zohotest
 * Generated on : 17-Nov-2023 15:26:18
 * Version      : 1.0
 */
 application "ImageList"
 {
 	date format = "dd-MMM-yyyy"
 	time zone = "Asia/Kolkata"
 	time format = "24-hr"
 	section DisplayImage
	{
		icon = "tech-desktop"
		form DisplayImage
		{
			success message = "Data Added Successfully!"
			field alignment = left
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Product_Name1
			(
    			type = text
				displayname = "Product Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Product_Gram1
			(
				type = number
				displayname = "Product Gram"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Cost_Per_Gram1
			(
				displayname = "Cost Per Gram"
				type = USD
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
			Total_Product_Cost1
			(
				displayname = "Total Product Cost"
				type = USD
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Product_Image1
			(
    			type = image
				displayname = "Product Image"
				source  = file
				aspect ratio = original
				camera = primary
				show gallery = true
				switch camera = true
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		print template
			{
				NewInvoiceTemplate
				{
						content = {"layout":"1","pageNumberOption":null,"orientation":"null","isFooterEnabled":false,"mainLayout":[{"elements":[{"type":"columns","element":{"split":"34,33,33","id":"elem_16712b537991","elemStyle":"background-color: rgb(245, 245, 245); padding: 10px 10px 0 10px","collayouts":[{"colElements":[{"type":"columns","element":{"split":"7,93","id":"elem_167133925f81","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"elem_167133925f8","fields":[],"content":"<div style=\"\"><p><br><\/p><\/div>"}}]},{"colElements":[{"type":"text","element":{"id":"elem_167593eb7ce","fields":[],"content":"<div style=\"\"><br><br><\/div>"}},{"type":"image","element":{"size":"NONE","src":"https://static.localzohocdn.com/creator/appbuilder/images/print-templates/z-logo-green.91cc40399e72c75c2f556d8d09d78ba9.png","captionMargin":"0px auto","alt":"","caption":"","id":"elem_1676e4fe9d6","align":"left","elemStyle":"border: 0px solid rgb(169, 169, 169); margin-top: 5px; width: 124px; padding-left: 6px","formCompID":""}}]}]}}]},{"colElements":[{"type":"text","element":{"id":"elem_16712b99ee1","fields":[],"content":"<div style=\"\"><br><\/div>"}},{"type":"text","element":{"id":"elem_167593e91bf","fields":[],"content":"<div style=\"\"><br><br><\/div>"}},{"type":"text","element":{"id":"elem_16712b53799","fields":[],"content":"<div style=\"\"><p style=\"text-align: center\"><b><font size=\"7\">INVOICE<\/font><\/b><\/p><p><b><font size=\"7\"><br><\/font><\/b><\/p><\/div>"}}]},{"colElements":[{"type":"columns","element":{"split":"91,9","id":"elem_167593d91151","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"elem_167593e56bb","fields":[],"content":"<div style=\"\"><br> <br>  <br><\/div>"}},{"type":"text","element":{"id":"elem_16712b53f0b","content":"<div style=\"\"><p style=\"text-align: right\"><span><span><b><font size=\"3\">Zylker Inc<\/font><\/b><\/span><\/span><\/p><p style=\"text-align: right\"><span><span><font size=\"3\" style=\"\">4141 Hacienda Drive, Pleasanton, CA, 94588, United States<br><\/font><\/span><\/span><\/p><\/div>"}}]},{"colElements":[{"type":"text","element":{"id":"elem_167593d9116","fields":[],"content":"<div style=\"\"><p><br><\/p><\/div>"}}]}]}}]}]}},{"type":"columns","element":{"split":"67,33","id":"elem_16712bb59cc1","elemStyle":"background-color: rgb(240, 240, 240); border-top: 1px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230); padding: 10px","collayouts":[{"colElements":[{"type":"text","element":{"id":"elem_16712bb59cd","fields":[],"content":"<div style=\"\"><p><br><\/p><\/div>"}}]},{"colElements":[{"type":"columns","element":{"split":"91,9","id":"elem_1675943c8581","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"elem_16712bb59cd","content":"<div style=\"\"><p style=\"text-align: right\"><b><font size=\"3\">Balance Due :&nbsp;<span><span>\u20b9 561.75<\/span><\/span><\/font><\/b><\/p><\/div>"}}]},{"colElements":[{"type":"text","element":{"id":"elem_1675943c858","fields":[],"content":"<div style=\"\"><p><br><\/p><\/div>"}}]}]}}]}]}},{"type":"text","element":{"id":"elem_16712cc65db","fields":[],"content":"<div style=\"\"><br><\/div>"}},{"type":"columns","element":{"split":"62,36,2","id":"elem_16712cca6341","elemStyle":"padding:10px","collayouts":[{"colElements":[{"type":"columns","element":{"split":"2,98","id":"elem_167594ebbd11","elemStyle":"padding:10px","collayouts":[{"colElements":[{"type":"text","element":{"id":"elem_167594ebbd1","fields":[],"content":"<div style=\"\"><p><br><\/p><\/div>"}}]},{"colElements":[{"id":"elem_1543830248217","type":"fields","element":{"valueStyle":"width: 50%","valueTextStyle":"font-size: 16px","fieldLayoutType":"6","wrapperStyle":"","labelText":"Bill To","labelStyle":"width: 50%; background-color: rgb(255, 255, 255)","Select_Field":true,"formCompId":"0","labelTextStyle":"font-weight: bold; font-size: 16px"}}]}]}}]},{"colElements":[{"type":"columns","element":{"split":"50,50","id":"elem_16712d5046e1","elemStyle":"padding:10px","collayouts":[{"colElements":[{"type":"text","element":{"id":"elem_16712d5046e","fields":[],"content":"<div style=\"\"><p style=\"text-align: right\"><b style=\"font-size: medium\">Invoice Date&nbsp;<\/b><b style=\"font-size: medium\">:<\/b><span><\/span><\/p><p style=\"text-align: right\"><span><span><span><font size=\"3\"><b>Terms<\/b>&nbsp;<span><span><span><span><b>:<\/b><\/span><\/span><\/span><\/span><\/font><\/span><\/span><\/span><\/p><p style=\"text-align: right\"><span><span><span><span><span><span><span><span><span><span><font size=\"3\"><b>Due Date<\/b>&nbsp;<span><span><b>:<\/b><\/span><\/span><\/font><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/p><p style=\"text-align: right\"><font size=\"3\"><b>P.O.#<\/b>&nbsp;<span><b>:<\/b><\/span><\/font><\/p><p style=\"text-align: right\"><font size=\"3\"><b>Project Name&nbsp;<\/b><b>:<\/b><\/font><\/p><p><\/p><\/div>"}}]},{"colElements":[{"type":"text","element":{"id":"elem_16712d5046e","content":"<div style=\"\"><p style=\"text-align: right\"><font size=\"3\">17-Oct-2018<span><\/span><\/font><\/p><p style=\"text-align: right\"><span><span><span><span><span><span><span><span><span><span><font size=\"3\">Due On Receipt<\/font><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/p><p style=\"text-align: right\"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><font size=\"3\">17-Oct-2020<\/font><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/p><p style=\"text-align: right\"><span><font size=\"3\">321014<\/font><\/span><\/p><p style=\"text-align: right\"><font size=\"3\">Design Project<\/font><\/p><p style=\"text-align: right\"><\/p><\/div>"}}]}]}}]},{"colElements":[{"type":"text","element":{"id":"elem_16759453e9d","fields":[],"content":"<div style=\"\"><p><br><\/p><\/div>"}}]}]}},{"type":"text","element":{"id":"elem_16712d6b76b","fields":[],"content":"<div style=\"\"><br><\/div>"}},{"id":"elem_1543830248217","type":"lookupfields","element":{"valueStyle":"width: 50%","valueTextStyle":"","fieldLayoutType":"2","refFormID":"-1","Select_Related_Field":true,"wrapperStyle":"","labelText":"SF2","labelStyle":"width: 50%; display: none","refFields":[{"valueStyle":" text-align: center; border-bottom: 1px solid rgb(240, 240, 240) ","fieldLayoutType":2,"labelText":"#","labelStyle":" width: 7%; text-align: center; font-weight: bold; border-top: 1px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230) ","Select_Field":true,"formCompId":"0"},{"valueStyle":" text-align: left; border-bottom: 1px solid rgb(240, 240, 240); padding: 2em 2em 2em 0.7em ","fieldLayoutType":2,"labelText":"Item","labelStyle":" width: 25%; text-align: left; font-weight: bold; border-top: 1px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230) ","Select_Field":true,"formCompId":"0"},{"valueStyle":" text-align: left; border-bottom: 1px solid rgb(240, 240, 240); padding: 2em 2em 2em 0.7em ","fieldLayoutType":2,"labelText":"Description","labelStyle":" width: 30%; text-align: left; font-weight: bold; border-top: 1px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230) ","Select_Field":true,"formCompId":"0"},{"valueStyle":" text-align: left; border-bottom: 1px solid rgb(240, 240, 240); padding: 2em 2em 2em 0.7em ","fieldLayoutType":2,"labelText":"Rate","labelStyle":" width: 10%; text-align: left; font-weight: bold; border-top: 1px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230) ","Select_Field":true,"formCompId":"0"},{"valueStyle":" text-align: left; border-bottom: 1px solid rgb(240, 240, 240); padding: 2em 2em 2em 0.7em ","fieldLayoutType":2,"labelText":"Qty","labelStyle":" width: 10%; text-align: left; font-weight: bold; border-top: 1px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230) ","Select_Field":true,"formCompId":"0"},{"valueStyle":" text-align: left; border-bottom: 1px solid rgb(240, 240, 240); padding: 2em 2em 2em 0.7em ","fieldLayoutType":2,"labelText":"Discount","labelStyle":" width: 9%; text-align: left; font-weight: bold; border-top: 1px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230) ","Select_Field":true,"formCompId":"0"},{"valueStyle":" text-align: left; border-bottom: 1px solid rgb(240, 240, 240); padding: 2em 2em 2em 0.7em ","fieldLayoutType":2,"labelText":"Amount","labelStyle":" width: 9%; text-align: left; font-weight: bold; border-top: 1px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230) ","Select_Field":true,"formCompId":"0"}],"formCompId":"-1","labelTextStyle":"font-weight: bold"}},{"type":"columns","element":{"split":"51,45,4","id":"elem_16712db6b971","elemStyle":"background-color: rgb(240, 240, 240); border-top: 1px solid rgb(230, 230, 230); border-bottom: 1px solid rgb(230, 230, 230); padding: 20px 0","collayouts":[{"colElements":[{"type":"text","element":{"id":"elem_16712db6b97","fields":[],"content":"<div style=\"\"><p><br><\/p><\/div>"}}]},{"colElements":[{"id":"elem_1543830248217","type":"fields","element":{"valueStyle":"width: 25%","valueTextStyle":"text-align: right; font-size: 16px","fieldLayoutType":"2","wrapperStyle":"","labelText":"Sub Total","labelStyle":"width: 75%; background-color: rgb(240, 240, 240)","Select_Field":true,"formCompId":"0","labelTextStyle":"font-weight: bold; text-align: right; font-size: 16px"}},{"id":"elem_1543830248217","type":"fields","element":{"valueStyle":"width: 25%","valueTextStyle":"text-align: right; font-size: 16px","fieldLayoutType":"2","wrapperStyle":"","labelText":"Sample Tax1 (4.70%)","labelStyle":"width: 75%; background-color: rgb(240, 240, 240)","Select_Field":true,"formCompId":"0","labelTextStyle":"font-weight: bold; text-align: right; font-size: 16px"}},{"id":"elem_1543830248217","type":"fields","element":{"valueStyle":"width: 25%","valueTextStyle":"text-align: right; font-size: 16px","fieldLayoutType":"2","wrapperStyle":"","labelText":"Total","labelStyle":"width: 75%; background-color: rgb(240, 240, 240)","Select_Field":true,"formCompId":"0","labelTextStyle":"text-align: right; font-weight: bold; font-size: 16px"}}]},{"colElements":[{"type":"text","element":{"id":"elem_16712db7c1c","fields":[],"content":"<div style=\"\"><p><br><\/p><\/div>"}}]}]}},{"type":"columns","element":{"split":"51,45,4","id":"elem_167131b0b001","elemStyle":"background-color: rgb(255, 255, 255); padding: 20px 0px","collayouts":[{"colElements":[{"type":"text","element":{"id":"elem_167131b0b01","fields":[],"content":"<div style=\"\"><p><br><\/p><\/div>"}}]},{"colElements":[{"id":"elem_1543830248217","type":"fields","element":{"valueStyle":"width: 25%","valueTextStyle":"font-weight: bold; text-align: right; font-size: 16px","fieldLayoutType":"2","wrapperStyle":"","labelText":"Balance Due","labelStyle":"width: 75%; background-color: rgb(255, 255, 255)","Select_Field":true,"formCompId":"0","labelTextStyle":"font-weight: bold; font-size: 16px; text-align: right"}}]},{"colElements":[{"type":"text","element":{"id":"elem_167131b1296","fields":[],"content":"<div style=\"\"><p><br><\/p><\/div>"}}]}]}},{"type":"text","element":{"id":"elem_167131e09dd","fields":[],"content":"<div style=\"\"><br><br><\/div>"}},{"type":"columns","element":{"split":"3,97","id":"elem_167594f23ca1","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"elem_167594f23ca","fields":[],"content":"<div style=\"\"><p><br><\/p><\/div>"}}]},{"colElements":[{"type":"text","element":{"id":"elem_167131e8ae2","fields":[],"content":"<div style=\"\"><p><font size=\"3\"><b>Terms &amp; Conditions<\/b><\/font><\/p><p><font size=\"3\">Invoice due upon receipt. Payable within 15 business days.<\/font><\/p><\/div>"}}]}]}},{"type":"text","element":{"id":"elem_167131fe827","fields":[],"content":"<div style=\"\"><br><br>  <\/div>"}},{"type":"text","element":{"id":"elem_16713202b12","fields":[],"content":"<div style=\"\"><hr style=\"border-color: rgb(240, 240, 240)\"><\/div>"}},{"type":"text","element":{"id":"elem_1671320a380","fields":[],"content":"<div style=\"\"><br> <p style=\"text-align: center\">   <font size=\"3\"><b>Notes:<\/b>&nbsp;For any queries, please contact Harry Smith : 00-0000-0000<\/font><\/p>  <br><\/div>"}}],"id":"1"}],"resize":"A4","templateStyle":"text-align: left; width: 793.7px; margin: 0px; padding: 30px","isHeaderEnabled":false}
				}
			}
		}
		default list DisplayImage_Report
		{
			displayName = "DisplayImage Report"
			show all rows from DisplayImage    
			(
				Product_Name1 as "Product Name"
				Product_Image1 as "Product Image"
				Product_Gram1 as "Product Gram"
				Cost_Per_Gram1 as "Cost Per Gram"
				Total_Product_Cost1 as "Total Product Cost"
				custom action "testReportEx"
				(
	  			workflow = testReportWorkflow
				show action in edit record menu = true
				column header = "testReportEx"
				)
				custom action "Add_to_Card"
				(
	  			workflow = AddToCard
				show action in edit record menu = true
				column header = "Add_to_Card"
				)
			)
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			customlayouts
	     			(
		 				template
		 				(
		 	  				displayname="Custom Layout 2"
		 	  				content="<panel  \n >\n	<pr \n			width='fill'\n		height='fill'\n>\n	<pc \n		padding = '20px'\n	bgColor = '#FFFFFF'\n\n		width = '100%'\n		hAlign = 'left'\n		vAlign = 'top'\n>\n	<pr \n			width='fill'\n		height='fill'\n>\n	<pc \n		padding = '0px'\n	bgColor = 'transparent'\n\n		width = '25%'\n		hAlign = 'left'\n		vAlign = 'top'\n>\n	<pr \n			width='auto'\n		height='auto'\n>\n	<pc \n	\n>\n	<image  \n	\n	color = '#FFFFFF'\n	bgColor = 'transparent'\n	width = '130px'\n	height = '130px'\n	type = 'field'\n	value = 'Product_Image1'\n	cornerRadius = '0px'\n/>\n</pc>\n</pr>\n</pc><pc \n		paddingTop = '0px'\n	paddingLeft = '15px'\n	paddingRight = '0px'\n	paddingBottom = '0px'\n	bgColor = 'transparent'\n\n		width = '75%'\n		hAlign = 'left'\n		vAlign = 'middle'\n>\n	<pr \n			width='fill'\n		height='fill'\n>\n	<pc \n		padding = '0px'\n\n		width = '50%'\n		hAlign = 'left'\n		vAlign = 'middle'\n>\n	<pr \n			width='auto'\n		height='auto'\n>\n	<pc \n		padding = '0px'\n\n		hAlign = 'left'\n>\n	<pr \n	>\n	<pc \n	\n>\n	<text \n\n	color = '#04173D'\n	size = '20px'\n	uppercase = 'false' \n	underline = 'false' \n	bold = 'true' \n	italic = 'false' \n	type = 'field'\n\n\n\n	  \n      	lineHeight = '29'\n      	  numOfLines = '1'\n	  value = 'Product_Name1'\n>\n</text>\n\n</pc>\n</pr><pr \n	>\n	<pc \n	\n>\n	<text \n\n	marginLeft = '0px'\n	marginRight = '0px' \n	marginBottom = '0px'\n	marginTop = '8px'\n	color = '#333333'\n	size = '15px'\n	uppercase = 'false' \n	underline = 'false' \n	bold = 'false' \n	italic = 'false' \n	type = 'field'\n\n\n\n	  \n      	lineHeight = '22'\n      	  numOfLines = '1'\n	  value = 'Product_Gram1'\n>\n</text>\n\n</pc>\n</pr>\n</pc>\n</pr>\n</pc><pc \n		padding = '17px'\n	bgColor = 'transparent'\n\n		width = '50%'\n		hAlign = 'center'\n>\n	<pr \n			width='auto'\n		height='auto'\n>\n	<pc \n	\n>\n	<text \n\n	marginTop = '22px'\n	color = '#4C4C4C'\n	size = '15px'\n	uppercase = 'false' \n	underline = 'false' \n	bold = 'false' \n	italic = 'false' \n	type = 'field'\n\n\n\n	  \n      	lineHeight = '22'\n      	  numOfLines = '1'\n	  value = 'Total_Product_Cost1'\n>\n</text>\n\n</pc>\n</pr>\n</pc>\n</pr><pr \n			width='fill'\n		height='fill'\n>\n	<pc \n		paddingTop = '0px'\n	paddingLeft = '0px'\n	paddingRight = '10px'\n	paddingBottom = '0px'\n	bgColor = 'transparent'\n\n		width = '100%'\n		hAlign = 'left'\n		vAlign = 'top'\n>\n	<pr \n			width='auto'\n		height='auto'\n>\n	<pc \n	\n>\n	<text \n\n	marginTop = '22px'\n	color = '#4C4C4C'\n	size = '15px'\n	uppercase = 'false' \n	underline = 'false' \n	bold = 'false' \n	italic = 'false' \n	type = 'field'\n\n\n\n	  \n      	lineHeight = '22'\n      	  numOfLines = '1'\n	  value = 'Cost_Per_Gram1'\n>\n</text>\n\n</pc>\n</pr>\n</pc>\n</pr>\n</pc>\n</pr>\n</pc>\n</pr>\n</panel>"
		    			)
	     			)
		 			type = -1
					datablock1
					(
						layout type = -1
						fields
						(
							Product_Image1 as "Product Image"
							Product_Name1 as "Product Name"
							Product_Gram1 as "Product Gram"
							Cost_Per_Gram1 as "Cost Per Gram"
							Total_Product_Cost1 as "Total Product Cost"
							"Add_to_Card"
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
					record
					(
						Edit   	   
						Duplicate   	   
						Delete   	   
    				)
    			)
    			action
    			(
					on click
					(
						View Record   	   
    				)
					on right click
					(
						Edit   	   
						Delete   	   
						Duplicate   	   
						View Record   	   
    				)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
						layout type = -2
		     			title = "Overview"
						fields
						(
							Product_Name1 as "Product Name"
							Product_Image1 as "Product Image"
							Product_Gram1 as "Product Gram"
							Cost_Per_Gram1 as "Cost Per Gram"
							Total_Product_Cost1 as "Total Product Cost"
							"testReportEx"
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list CustomReport
		{
			displayName = "CustomReport"
			show all rows from DisplayImage    
			(
				Product_Name1 as "Product Name"
				Product_Gram1 as "Product Gram"
				Cost_Per_Gram1 as "Cost Per Gram"
				Total_Product_Cost1 as "Total Product Cost"
				Product_Image1 as "Product Image"
			)
			options
			(
				icon = "design-bullet-list-67"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
						layout type = -1
						fields
						(
							Product_Image1 as "Product Image"
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
					record
					(
						Edit   	   
						Duplicate   	   
						Delete   	   
    				)
    			)
    			action
    			(
					on click
					(
						View Record   	   
    				)
					on right click
					(
						Edit   	   
						Delete   	   
						Duplicate   	   
						View Record   	   
    				)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
						layout type = -2
						fields
						(
							Product_Name1 as "Product Name"
							Product_Gram1 as "Product Gram"
							Cost_Per_Gram1 as "Cost Per Gram"
							Total_Product_Cost1 as "Total Product Cost"
							Product_Image1 as "Product Image"
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section New_Orders
	{
		displayname= "New Orders"
		icon = "users-2-child"
		form New_Order
		{
			displayname = "New Order"
			success message = "New Order Added Successfully"
			field alignment = left
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			plain
			(
    			type = plaintext
				value = "Add your Note here ..."
	 			row = 1
	 			column = 1   
				width = medium
			)
			DisplayImage
			(
				type = picklist	
				values  = DisplayImage.ID
    			displayformat = [Product_Name1]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "users-2-child"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		default list All_New_Orders
		{
			displayName = "All New Orders"
			show all rows from New_Order    
			(
				DisplayImage
			)
			options
			(
				icon = "travel-world"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
						layout type = -1
						fields
						(
							DisplayImage
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
					record
					(
						Edit   	   
						Duplicate   	   
						Delete   	   
    				)
    			)
    			action
    			(
					on click
					(
						View Record   	   
    				)
					on right click
					(
						Edit   	   
						Delete   	   
						Duplicate   	   
						View Record   	   
    				)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
						layout type = -2
						fields
						(
							DisplayImage
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section JewellsList
	{
		icon = "tech-desktop"
		page JewellsList
		{
			displayname = "JewellsList"
			icon = "design-window-paragraph"
			Content="<zml    \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='html_snippet' elementName=\"HTML Snippet\"\n bgColor=\"#FFFFFF\" \n>\n\t<![CDATA[htmlpage html_snippet()\ncontent\n&lt;%{\n\t%&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;style&gt;\n\ntable{\n\tborder-collapes: collapes;\n\twidth: 70%;\n}\n\nth,td{\n\tborder: 2px solid green;\n\tpadding: 2px 4px;\n}\n\n&lt;\/style&gt;\n&lt;\/head&gt;\n&lt;%\n\tfetchJewellsDetails = DisplayImage[ID != 0];\n\tjewellDetails = &quot;&lt;table&gt;&lt;tr&gt;&lt;th&gt;Product Name&lt;\/th&gt;&lt;th&gt;Product Image&lt;\/th&gt;&lt;th&gt;Product Gram&lt;\/th&gt;&lt;th&gt;Cost per Gram&lt;\/th&gt;&lt;th&gt;Total Price&lt;\/th&gt;&lt;\/tr&gt;&quot;;\n\tfor each  jewellDetail in fetchJewellsDetails\n\t{\n\t\timg = DisplayImage[ID == jewellDetail].Product_Image1;\n\t\tif(img != null)\n\t\t{\n\t\t\timg = img.replaceAll(&quot;\/sharedBy\/appLinkName\/&quot;,zoho.appuri);\n\t\t\timg = img.replaceAll(&quot;viewLinkName&quot;,&quot;DisplayImage_Report&quot;);\n\t\t\timg = img.replaceAll(&quot;fieldName&quot;,&quot;Product_Image1&quot;);\n\t\t\timg = img.replaceAll(&quot;&lt;img&quot;,&quot;&lt;img height = 100px width = 100px&quot;);\n\t\t}\n\t\tjewellDetails = jewellDetails + &quot;&lt;tr&gt;&lt;td&gt;&quot; + jewellDetail.Product_Name1 + &quot;&lt;\/td&gt;&lt;td&gt;&quot; + img + &quot;&lt;\/td&gt;&lt;td&gt;&quot; + jewellDetail.Product_Gram1 + &quot;&lt;\/td&gt;&lt;td&gt;&quot; + jewellDetail.Cost_Per_Gram1 + &quot;&lt;\/td&gt;&lt;td&gt;&quot; + jewellDetail.Total_Product_Cost1 + &quot;&lt;\/td&gt;&lt;\/tr&gt;&quot;;\n\t}\n\tjewellDetails = jewellDetails + &quot;&lt;\/table&gt;&quot;;\n\t%&gt;\n&lt;%=jewellDetails%&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>"
		}
		page SelectItemWithButtonEx
		{
			displayname = "SelectItemWithButtonEx"
			icon = "design-window-paragraph"
			Content="<zml    \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='html_snippet' elementName=\"HTML Snippet\"\n bgColor=\"#FFFFFF\" \n>\n\t<![CDATA[htmlpage html_snippet()\ncontent\n&lt;%{\n\t%&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;style&gt;\n\ntable{\n\tborder-collapes: collapes;\n\twidth: 70%;\n}\n\nth,td{\n\tborder: 2px solid black;\n\tpadding: 2px 4px;\n}\n\n&lt;\/style&gt;\n\n&lt;\/head&gt;\n&lt;%\n\tfetchJewellsDetails = DisplayImage[ID != 0];\n\t%&gt;\n&lt;%=fetchJewellsDetails%&gt;\n&lt;%\n\tjewellDetails = &quot;&lt;table&gt;&lt;tr&gt;&lt;th&gt;Product Name&lt;\/th&gt;&lt;th&gt;Product Image&lt;\/th&gt;&lt;th&gt;Product Gram&lt;\/th&gt;&lt;th&gt;Cost per Gram&lt;\/th&gt;&lt;th&gt;Total Price&lt;\/th&gt;&lt;\/tr&gt;&quot;;\n\tclassId = 0;\n\tfor each  jewellDetail in fetchJewellsDetails\n\t{\n\t\tclassId = classId + 1;\n\t\timg = DisplayImage[ID == jewellDetail].Product_Image1;\n\t\tif(img != null)\n\t\t{\n\t\t\timg = img.replaceAll(&quot;\/sharedBy\/appLinkName\/&quot;,zoho.appuri);\n\t\t\timg = img.replaceAll(&quot;viewLinkName&quot;,&quot;DisplayImage_Report&quot;);\n\t\t\timg = img.replaceAll(&quot;fieldName&quot;,&quot;Product_Image1&quot;);\n\t\t\timg = img.replaceAll(&quot;&lt;img&quot;,&quot;&lt;img height = 100px width = 100px&quot;);\n\t\t}\n\t\t%&gt;\n&lt;%=img%&gt;\n&lt;%\n\t\tjewellDetails = jewellDetails + &quot;&lt;tr&gt;&lt;td&gt;&quot; + jewellDetail.Product_Name1 + &quot;&lt;\/td&gt;&lt;td&gt;&quot; + img + &quot;&lt;\/td&gt;&lt;td&gt;&quot; + jewellDetail.Product_Gram1 + &quot;&lt;\/td&gt;&lt;td&gt;&quot; + jewellDetail.Cost_Per_Gram1 + &quot;&lt;\/td&gt;&lt;td&gt;&quot; + jewellDetail.Total_Product_Cost1 + &quot;&lt;\/td&gt;&lt;\/tr&gt;&quot;;\n\t}\n\tjewellDetails = jewellDetails + &quot;&lt;\/table&gt;&quot;;\n\t%&gt;\n&lt;%=jewellDetails%&gt;\n&lt;div id = &quot;d1&quot;&gt;welcome&lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<panel elementName=\"Panel 1\"\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n>\n\t<button \n\t\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    action = 'OpenReport'\n\t\tcomponentLinkName = 'DisplayImage_Report'\n\t\ttarget = 'new-window'\n\tcolor = '#ffffff'\n\tsize = '16px'\n\ttext ='DisplayImage Report'\n\t\ttype = 'flat'\n\t\tbgColor = '#0072f4'\n\/>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<panel elementName=\"Panel\"\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n\t\tvAlign = 'middle'\n>\n\t<button \n\t\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    action = 'OpenForm'\n\t\tcomponentLinkName = 'DisplaySelectedItems'\n\t\ttarget = 'same-window'\n\tcolor = '#FFFFFF'\n\tsize = '16px'\n\ttext ='Click To Order'\n\t\ttype = 'flat'\n\t\tbgColor = '#0072F4'\n\t\tcornerRadius = '3px' \n\/>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>"
		}
		page SelectItemToOrderEx
		{
			displayname = "SelectItemToOrderEx"
			icon = "design-window-paragraph"
			Content="<zml    \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='html_snippet' elementName=\"HTML Snippet\"\n bgColor=\"#FFFFFF\" \n>\n\t<![CDATA[htmlpage html_snippet()\ncontent\n&lt;%{\n\t%&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;style&gt;\n\n.classSelector\n{\n\tborder: 2px solid lightblue;\n\theight: 250px;\n\twidth: 250px;\n\t\n}\n.classSelectorButton\n{\n\theight: 50px;\n\twidth: 150px;\n}\n\n&lt;\/style&gt;\n\n&lt;\/head&gt;\n&lt;%\n\tfetchJewellsDetails = DisplayImage[ID != 0];\n\t%&gt;\n&lt;%=fetchJewellsDetails%&gt;\n&lt;%\n\tfor each  jewellDetail in fetchJewellsDetails\n\t{\n\t\timg = DisplayImage[ID == jewellDetail].Product_Image1;\n\t\tif(img != null)\n\t\t{\n\t\t\timg = img.replaceAll(&quot;\/sharedBy\/appLinkName\/&quot;,zoho.appuri);\n\t\t\timg = img.replaceAll(&quot;viewLinkName&quot;,&quot;DisplayImage_Report&quot;);\n\t\t\timg = img.replaceAll(&quot;fieldName&quot;,&quot;Product_Image1&quot;);\n\t\t\timg = img.replaceAll(&quot;&lt;img&quot;,&quot;&lt;img height = 110px width = 110px&quot;);\n\t\t}\n\t\tjewellDetailDiv = &quot;&lt;div class=&apos;classSelector&apos;&gt;&quot; + &quot;Product Name&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp:&quot; + jewellDetail.Product_Name1 + &quot;&lt;br&gt;&quot; + &quot;Product Image&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp:&lt;br&gt;&quot; + img + &quot;&lt;br&gt;&quot; + &quot;Gram of Product&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp:&quot; + jewellDetail.Product_Gram1 + &quot;&lt;br&gt;&quot; + &quot;Cost per Gram&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp:&quot; + jewellDetail.Cost_Per_Gram1 + &quot;&lt;br&gt;&quot;;\n\t\tjewellDetailDiv = jewellDetailDiv + &quot;Total Cost&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp:&quot; + jewellDetail.Total_Product_Cost1 + &quot;&lt;br&gt;&quot; + &quot;&lt;a href=&apos;&lt;%thisapp.sayHello();%&gt;#&apos;&gt;&quot; + &quot;&lt;input type = &apos;button&apos; value= &apos;Add to Cart&apos; class=&apos;classSelectorButton&apos;&gt;&lt;\/input&gt;&quot; + &quot;&lt;\/a&gt;&quot; + &quot;&lt;\/div&gt;&quot;;\n\t\t%&gt;\n&lt;%=jewellDetailDiv%&gt;\n&lt;br&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;div id = &quot;d1&quot;&gt;welcome&lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<panel elementName=\"Panel\"\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n\t\tvAlign = 'middle'\n>\n\t<button \n\t\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    action = 'ExecuteFunction'\n\n\t\tfunctionName = 'sayHello'  \n\tcolor = '#FFFFFF'\n\tsize = '16px'\n\ttext ='Generate Invoice'\n\t\ttype = 'flat'\n\t\tbgColor = '#0072F4'\n\t\tcornerRadius = '3px' \n\/>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<panel elementName=\"Panel 1\"\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n\t\tvAlign = 'middle'\n>\n\t<button \n\t\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    action = 'ExecuteFunction'\n\n\t\tfunctionName = 'sayHello'  \n\tcolor = '#FFFFFF'\n\tsize = '16px'\n\ttext ='Update Details'\n\t\ttype = 'rounded'\n\t\tbgColor = '#0072F4'\n\t\tcornerRadius = '45.5938px' \n\/>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>"
		}
		page ZmlPageForTest
		{
			displayname = "ZmlPageForTest"
			icon = "design-window-paragraph"
			Content="<zml    \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<panel elementName=\"Panel 1\"\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n\t\tvAlign = 'middle'\n>\n\t<button \n\t\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    action = 'ExecuteFunction'\n\n\t\tfunctionName = 'sayHello'  \n\tcolor = '#FFFFFF'\n\tsize = '16px'\n\ttext ='showMessage'\n\t\ttype = 'flat'\n\t\tbgColor = '#0072F4'\n\t\tcornerRadius = '3px' \n\/>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<panel elementName=\"Panel\"\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n>\n\t<button \n\t\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    action = 'ExecuteFunction'\n\n\t\tfunctionName = 'sayHello'  \n\tcolor = '#FFFFFF'\n\tsize = '16px'\n\ttext ='Rectangular'\n\t\ttype = 'flat'\n\t\tbgColor = '#0072F4'\n\t\tcornerRadius = '3px' \n\/>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dspZml id='zml_snippet' elementName=\"ZML Snippet\"\n>\n\t<![CDATA[htmlpage zml_snippet()\ncontent\n&lt;%{\n\tvalue = &quot;welcome&quot;;\n\tfetchJewellsDetails = DisplayImage[ID != 0];\n\t%&gt;\n&lt;panel elementName=&quot;Panel&quot;&gt;\n&lt;%\n\tfor each  jewellDetail in fetchJewellsDetails\n\t{\n\t\timg = DisplayImage[ID == jewellDetail].Product_Image1;\n\t\tif(img != null)\n\t\t{\n\t\t\timg = img.replaceAll(&quot;\/sharedBy\/appLinkName\/&quot;,zoho.appuri);\n\t\t\timg = img.replaceAll(&quot;viewLinkName&quot;,&quot;DisplayImage_Report&quot;);\n\t\t\timg = img.replaceAll(&quot;fieldName&quot;,&quot;Product_Image1&quot;);\n\t\t\timg = img.replaceAll(&quot;&lt;img&quot;,&quot;&lt;img height = 100px width = 100px&quot;);\n\t\t}\n\t\tinfo jewellDetail;\n\t\t%&gt;\n&lt;pr&gt;\n\n &lt;pc&gt; &lt;text value=&apos;Product Name:&lt;%=jewellDetail.Product_Name1%&gt;&apos; size=&apos;3&apos;&gt; &lt;\/text&gt;&lt;\/pc&gt;\n\n &lt;pc&gt;\n&lt;image color=&apos;#20B2E3&apos; bgColor=&apos;#FFFFFF&apos; width=&apos;52px&apos; height=&apos;52px&apos; type=&apos;icon&apos; value=&apos;arrows-1-bold-right&apos; size=&apos;1&apos; cornerRadius=&apos;10px&apos; iconType=&apos;solid&apos; \/&gt; &lt;\/pc&gt;\n\n&lt;pc&gt;\n&lt;image value=&apos;https:\/\/creatorapp.localzoho.com\/latha.p_zohotest\/imagelist\/#Report:DisplayImage_Report\/1691558006974_Bangle2.jpeg&apos;   componentLinkName=&apos;DisplayImage_Report&apos;   appLinkName=&apos;ImageList&apos;\/&gt;\n&lt;\/pc&gt;\n\n &lt;pc&gt; &lt;text value=&apos;Product Gram:&lt;%=jewellDetail.Product_Gram1%&gt;&apos; size=&apos;3&apos;&gt; &lt;\/text&gt;&lt;\/pc&gt;\n &lt;pc&gt; &lt;text value=&apos;Cost Per Gram: &lt;%=jewellDetail.Cost_Per_Gram1%&gt;&apos; size=&apos;3&apos;&gt; &lt;\/text&gt;&lt;\/pc&gt;\n &lt;pc&gt; &lt;text value=&apos;Total Cost:&lt;%=jewellDetail.Total_Product_Cost1%&gt;&apos; size=&apos;3&apos;&gt; &lt;\/text&gt;&lt;\/pc&gt;\n \n        &lt;pc&gt;\n          &lt;button marginLeft=&apos;0px&apos; marginRight=&apos;0px&apos; marginBottom=&apos;0px&apos; marginTop=&apos;0px&apos; action=&apos;ExecuteFunction&apos; functionName=&apos;showProductDetails&apos; color=&apos;#FFFFFF&apos; size=&apos;16px&apos; text=&apos;Add to Card&apos; bgColor=&apos;#0072F4&apos; cornerRadius=&apos;3px&apos; parameters=&apos;productName=&lt;%=jewellDetail.Product_Name1%&gt;&amp;amp;productGram=&lt;%=jewellDetail.Product_Gram1%&gt;&amp;amp;costPerGram=&lt;%=jewellDetail.Cost_Per_Gram1%&gt;&amp;amp;totalCost=&lt;%=jewellDetail.Total_Product_Cost1%&gt;&apos;\/&gt; &lt;\/pc&gt;\n\t\t\n     \n&lt;\/pr&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;\/panel&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dspZml>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<panel elementName=\"Panel 2\"\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n\t\tvAlign = 'middle'\n>\n\t<button \n\t\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    action = 'ExecuteFunction'\n\n\t\tfunctionName = 'sayHello'  \n\tcolor = '#FFFFFF'\n\tsize = '16px'\n\ttext ='Card'\n\t\ttype = 'flat'\n\t\tbgColor = '#0072F4'\n\t\tcornerRadius = '3px' \n\/>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>"
		}
		page OrderZmlSnippet
		{
			displayname = "OrderZmlSnippet"
			icon = "design-window-paragraph"
			Content="<zml    \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dspZml id='zml_snippet' elementName=\"ZML Snippet\"\n>\n\t<![CDATA[htmlpage zml_snippet()\ncontent\n&lt;%{\n\t%&gt;\n&lt;panel&gt;\n&lt;pr height=&apos;fill&apos; width=&apos;fill&apos;&gt;\n&lt;pc width=&apos;100%&apos; bgColor=&apos;#FFFFFF&apos; padding=&apos;20px&apos;&gt;\n&lt;text value=&apos;Online Purchase&apos; size=&apos;4&apos; color=&apos;#000000&apos;&gt; &lt;\/text&gt;\n&lt;\/pc&gt;\n&lt;\/pr&gt;\n&lt;\/panel&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dspZml>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<panel elementName=\"Panel\"\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\thAlign = 'right'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n\t\tvAlign = 'middle'\n>\n\t<button \n\t\tmarginLeft = '0px'\n\tmarginRight = '23px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    action = 'OpenPage'\n\t\tcomponentLinkName = 'CartPage'\n\t\ttarget = 'same-window'\n\tcolor = '#FFFFFF'\n\tsize = '20px'\n\ttext ='Cart'\n\t\ttype = 'flat'\n\t\tbgColor = '#0072F4'\n\t\tcornerRadius = '3px' \n\/>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<report \n\telementName=\"Report\"\n\n\t\tappLinkName = 'thisapp'\n\t\tlinkName = 'DisplayImage_Report'\n\t\n\t\tiszreport = 'false'\n\t            zc_Footer = 'false'\n\t            zc_AddRec = 'false'\n\t            zc_EditRec = 'false'\n\t            zc_Print = 'false'\n\t            zc_Export = 'false'\n\t            zc_DelRec = 'false'\n\t            zc_DuplRec = 'false'\n\t            zc_Search = 'false'\n\t            zc_EditBulkRec = 'false'\n\t            zc_BulkDelete = 'false'\n\t            zc_BulkDuplicate = 'false'\n\theightType = 'auto'\n\theightValue = '700'\n\n\/>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>"
		}
		page CartPage
		{
			displayname = "CartPage"
			icon = "design-window-paragraph"
			Content="<zml    \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<report \n\telementName=\"Report\"\n\n\t\tappLinkName = 'thisapp'\n\t\tlinkName = 'AddToCartDetailForm_Report'\n\t\n\t\tiszreport = 'false'\n\t            zc_Footer = 'false'\n\t            zc_AddRec = 'false'\n\t            zc_EditRec = 'false'\n\t            zc_Print = 'false'\n\t            zc_Export = 'false'\n\t            zc_DelRec = 'false'\n\t            zc_DuplRec = 'false'\n\t            zc_Search = 'false'\n\t            zc_EditBulkRec = 'false'\n\t            zc_BulkDelete = 'false'\n\t            zc_BulkDuplicate = 'false'\n\theightType = 'auto'\n\theightValue = '700'\n\n\/>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<panel elementName=\"Panel\"\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n\t\tvAlign = 'middle'\n>\n\t<button \n\t\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    action = 'OpenForm'\n\t\tcomponentLinkName = 'DisplaySelectedItems'\n\t\ttarget = 'same-window'\n\tcolor = '#FFFFFF'\n\tsize = '20px'\n\ttext ='Place Order'\n\t\ttype = 'flat'\n\t\tbgColor = '#0072F4'\n\t\tcornerRadius = '3px' \n\/>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>"
		}
	}
	section DisplaySelectedItems
	{
		icon = "tech-desktop"
		form DisplaySelectedItems
		{
			success message = "Data Added Successfully! And Invoice Generated Successfully!"
			field alignment = left
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Select_Customer_ID
			(
				type = picklist
				displayname = "Select Customer ID"
				maxchar = 100
				values = {""}
	 			row = 1
	 			column = 1   
				width = medium
			)
			SubForm
			(
				type = grid
				Product_Name
				(
    				type = text
					displayname = "Product Name"
					width = medium
				)
				Product_Gram
				(
					type = number
					displayname = "Product Gram"
					width = medium
				)
				Cost_Per_Gram
				(
					displayname = "Cost Per Gram"
					type = USD
					format = commadotwestern
					width = medium
				)
				Product_Cost
				(
					displayname = "Product Cost"
					type = USD
					format = commadotwestern
					width = medium
				)
				Product_Quantity
				(
					type = number
					displayname = "Product Quantity"
					width = medium
				)
				Total_Product_Cost
				(
					displayname = "Total Product Cost"
					type = USD
					format = commadotwestern
					width = medium
				)
	 			row = 2
	 			column = 1   
				width = medium
			)
			Section1
			(
				type = section
				displayname = "Section"
				visibility = true
	 			row = 3
	 			column = 0   
				width = medium
			)
			Total_Invoice_Amount
			(
				displayname = "Total Invoice Amount"
				type = USD
				format = commadotwestern
	 			row = 3
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					Click_to_Generate_Invoice
					(
   						type = submit
   						displayname = "Click to Generate Invoice"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		default list DisplaySelectedItems_Report
		{
			displayName = "DisplaySelectedItems Report"
			show all rows from DisplaySelectedItems    
			(
				Select_Customer_ID as "Select Customer ID"
				SubForm.Product_Name as "SubForm"
				Total_Invoice_Amount as "Total Invoice Amount"
			)
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			customlayouts
	     			(
		 				template
		 				(
		 	  				displayname="Custom Layout 1"
		 	  				content="<panel  \n >\n	<pr \n			width='fill'\n		height='fill'\n>\n	<pc \n		bgColor = '#FFFFFF'\n\n		width = '100%'\n		hAlign = 'center'\n		vAlign = 'middle'\n>\n	<pr \n			width='fill'\n		height='fill'\n>\n	<pc \n		padding = '17px'\n\n		width = '100%'\n>\n	<pr \n			width='auto'\n		height='auto'\n>\n	<pc \n	\n>\n	<text \n\n	color = '#000000'\n	size = '16px'\n	uppercase = 'false' \n	underline = 'false' \n	bold = 'false' \n	italic = 'false' \n	type = 'field'\n	bgColor = 'rgba(0, 0, 0, 0)'\n\n\n\n	  \n      	lineHeight = '22'\n      	  numOfLines = '3'\n	  value = 'None'\n>\n</text>\n\n</pc>\n</pr>\n</pc>\n</pr><pr \n			width='fill'\n		height='fill'\n>\n	<pc \n		paddingTop = '0px'\n	paddingLeft = '17px'\n	paddingRight = '17px'\n	paddingBottom = '17px'\n	bgColor = 'transparent'\n\n		width = '100%'\n		hAlign = 'center'\n>\n	<pr \n			width='auto'\n		height='auto'\n>\n	<pc \n	\n>\n	\n</pc>\n</pr>\n</pc>\n</pr>\n</pc>\n</pr>\n</panel>"
		    			)
	     			)
		 			type = -1
					datablock1
					(
						layout type = -1
						fields
						(
							Select_Customer_ID as "Select Customer ID"
							SubForm.Product_Name as "SubForm"
							Total_Invoice_Amount as "Total Invoice Amount"
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
					record
					(
						Edit   	   
						Duplicate   	   
						Delete   	   
    				)
    			)
    			action
    			(
					on click
					(
						View Record   	   
    				)
					on right click
					(
						Edit   	   
						Delete   	   
						Duplicate   	   
						View Record   	   
    				)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
						layout type = -2
						fields
						(
							Select_Customer_ID as "Select Customer ID"
							SubForm.Product_Name as "SubForm"
							Total_Invoice_Amount as "Total Invoice Amount"
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section GetCustomerDetails
	{
		icon = "tech-desktop"
		form GetCustomerDetails
		{
			success message = "Data Added Successfully!"
			field alignment = left
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		default list GetCustomerDetails_Report
		{
			displayName = "GetCustomerDetails Report"
			show all rows from GetCustomerDetails    
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
						layout type = -1
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
					record
					(
						Edit   	   
						Duplicate   	   
						Delete   	   
    				)
    			)
    			action
    			(
					on click
					(
						View Record   	   
    				)
					on right click
					(
						Edit   	   
						Delete   	   
						Duplicate   	   
						View Record   	   
    				)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
						layout type = -2
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section CardForm
	{
		icon = "tech-desktop"
		form CardForm
		{
			success message = "Data Added Successfully!"
			field alignment = left
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		default list CardForm_Report
		{
			displayName = "CardForm Report"
			show all rows from CardForm    
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
						layout type = -1
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
					record
					(
						Edit   	   
						Duplicate   	   
						Delete   	   
    				)
    			)
    			action
    			(
					on click
					(
						View Record   	   
    				)
					on right click
					(
						Edit   	   
						Delete   	   
						Duplicate   	   
						View Record   	   
    				)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
						layout type = -2
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section CardSubForm
	{
		icon = "tech-desktop"
		form CardSubForm
		{
			success message = "Data Added Successfully!"
			field alignment = left
			Sub_Form_Fields1
			(
				type = grid
				displayname = "SubFormFields1"
				values  = DisplayImage.ID
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					Place_Order
					(
   						type = submit
   						displayname = "Place Order"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
				}
			}
		}
		default list CardSubForm_Report
		{
			displayName = "CardSubForm Report"
			show all rows from CardSubForm    
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
						layout type = -1
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
					record
					(
						Edit   	   
						Duplicate   	   
						Delete   	   
    				)
    			)
    			action
    			(
					on click
					(
						View Record   	   
    				)
					on right click
					(
						Edit   	   
						Delete   	   
						Duplicate   	   
						View Record   	   
    				)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
						layout type = -2
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section AddValueTest
	{
		icon = "tech-desktop"
		form AddValueTest
		{
			success message = "Data Added Successfully!"
			field alignment = left
			SubForm
			(
				type = grid
				Name
				(
    				type = name
     				prefix
     				(
	     				 type = prefix
	     				 displayname ="Prefix"
	     				 visibility = false
	     				 value = {"Mr.","Mrs.","Ms."}
     				) 
     				first_name
     				(
	     				 type = first_name
	     				 displayname ="First Name"
     				) 
     				last_name
     				(
	     				 type = last_name
	     				 displayname ="Last Name"
     				) 
     				suffix
     				(
	     				 type = suffix
	     				 displayname ="Suffix"
	     				 visibility = false
     				) 
					width = medium
					personal data = true
				)
				Single_Line
				(
    				type = text
					displayname = "Single Line"
					width = medium
				)
				Phone_Number
				(
    				type = phonenumber
					displayname = "Phone"
					width = medium
					personal data = true
				)
	 			row = 1
	 			column = 1   
				width = medium
			)
			Section
			(
				type = section
	 			row = 2
	 			column = 0   
				width = medium
			)
			Date_field
			(
    			type = date
				displayname = "Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 2
	 			column = 1   
				width = medium
			)
			Checkbox
			(
				type = checkboxes	
				values = {"Choice 1","Choice 2","Choice 3"}
	 			row = 2
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		default list AddValueTest_Report
		{
			displayName = "AddValueTest Report"
			show all rows from AddValueTest    
			(
				SubForm.Name as "SubForm"
				Date_field as "Date"
				Checkbox
			)
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
						layout type = -1
						fields
						(
							SubForm.Name as "SubForm"
							Date_field as "Date"
							Checkbox
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
					record
					(
						Edit   	   
						Duplicate   	   
						Delete   	   
    				)
    			)
    			action
    			(
					on click
					(
						View Record   	   
    				)
					on right click
					(
						Edit   	   
						Delete   	   
						Duplicate   	   
						View Record   	   
    				)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
						layout type = -2
						fields
						(
							SubForm.Name as "SubForm"
							Date_field as "Date"
							Checkbox
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list CustomReport1
		{
			displayName = "CustomReport1"
			show all rows from AddValueTest    
			(
				Date_field as "Date"
				Checkbox
			)
			options
			(
				icon = "design-bullet-list-67"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
						layout type = -1
						fields
						(
							Date_field as "Date"
							Checkbox
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
					record
					(
						Edit   	   
						Duplicate   	   
						Delete   	   
    				)
    			)
    			action
    			(
					on click
					(
						View Record   	   
    				)
					on right click
					(
						Edit   	   
						Delete   	   
						Duplicate   	   
						View Record   	   
    				)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
						layout type = -2
						fields
						(
							Date_field as "Date"
							Checkbox
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section AddToCartDetailForm
	{
		icon = "tech-desktop"
		form AddToCartDetailForm
		{
			success message = "Data Added Successfully!"
			field alignment = left
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Product_Name
			(
    			type = text
				displayname = "Product Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Product_Gram
			(
				type = number
				displayname = "Product Gram"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Cost_Per_Gram
			(
				displayname = "Cost Per Gram"
				type = USD
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
			Product_Cost
			(
				displayname = "Product Cost"
				type = USD
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
			Product_Image
			(
    			type = image
				displayname = "Product Image"
				source  = file
				aspect ratio = original
				camera = primary
				show gallery = true
				switch camera = true
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		default list AddToCartDetailForm_Report
		{
			displayName = "AddToCartDetailForm Report"
			show all rows from AddToCartDetailForm    
			(
				Product_Name as "Product Name"
				Product_Gram as "Product Gram"
				Cost_Per_Gram as "Cost Per Gram"
				Product_Cost as "Product Cost"
				Product_Image as "Product Image"
				custom action "Remove Item From Cart"
				(
	  			workflow = RemoveItemFromCart
				show action in edit record menu = true
				column header = "Remove Item From Cart"
				)
			)
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
						layout type = -1
						fields
						(
							Product_Name as "Product Name"
							Product_Gram as "Product Gram"
							Cost_Per_Gram as "Cost Per Gram"
							Product_Cost as "Product Cost"
							Product_Image as "Product Image"
							"Remove Item From Cart"
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
					record
					(
						Edit   	   
						Duplicate   	   
						Delete   	   
    				)
    			)
    			action
    			(
					on click
					(
						View Record   	   
    				)
					on right click
					(
						Edit   	   
						Delete   	   
						Duplicate   	   
						View Record   	   
    				)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
						layout type = -2
						fields
						(
							Product_Name as "Product Name"
							Product_Gram as "Product Gram"
							Cost_Per_Gram as "Cost Per Gram"
							Product_Cost as "Product Cost"
							Product_Image as "Product Image"
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section PlanDetail
	{
		icon = "tech-desktop"
		form PlanDetail
		{
			success message = "Data Added Successfully!"
			field alignment = left
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Plan_Name1
			(
    			type = text
				displayname = "Plan Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Plan_Code1
			(
    			type = text
				displayname = "Plan Code"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Price1
			(
				displayname = "Price"
				type = USD
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Duration1
			(
				type = number
				displayname = "Duration"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Plan_Type1
			(
				type = picklist
				displayname = "Plan Type"
				maxchar = 100
				values = {"Week(s)","Month(s)","Year(s)"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			Item_Image1
			(
    			type = image
				displayname = "Item Image"
				source  = file
				aspect ratio = original
				camera = primary
				show gallery = true
				switch camera = true
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		default list PlanDetail_Report
		{
			displayName = "PlanDetail Report"
			show all rows from PlanDetail    
			(
				Plan_Code1 as "Plan Code"
				Price1 as "Price"
				Duration1 as "Duration"
				Item_Image1 as "Item Image"
				Plan_Name1 as "Plan Name"
				Plan_Type1 as "Plan Type"
			)
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
						layout type = -1
						fields
						(
							Plan_Code1 as "Plan Code"
							Price1 as "Price"
							Duration1 as "Duration"
							Item_Image1 as "Item Image"
							Plan_Name1 as "Plan Name"
							Plan_Type1 as "Plan Type"
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
					record
					(
						Edit   	   
						Duplicate   	   
						Delete   	   
    				)
    			)
    			action
    			(
					on click
					(
						View Record   	   
    				)
					on right click
					(
						Edit   	   
						Delete   	   
						Duplicate   	   
						View Record   	   
    				)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
						layout type = -2
						fields
						(
							Plan_Code1 as "Plan Code"
							Price1 as "Price"
							Duration1 as "Duration"
							Item_Image1 as "Item Image"
							Plan_Name1 as "Plan Name"
							Plan_Type1 as "Plan Type"
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Subscriptions
	{
		icon = "tech-2-sim-card"
		form Subscriptions
		{
			success message = "Subscription Added Successfully"
			field alignment = left
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Name
			(
    			type = text
				displayname = "Enter Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Customers_Ids
			(
				type = picklist
				displayname = "Customers Ids"
				maxchar = 100
				values = {"Choice 1","Choice 2","Choice 3"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			Customer_Names
			(
				type = picklist
				displayname = "Customer Names"
				maxchar = 100
				values = {"Choice 1","Choice 2","Choice 3"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Plan_Detail
			(
				type = picklist	
				displayname = "Plan Detail"
				values  = PlanDetail.ID
    			displayformat = [Plan_Code1]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Plan_Name
			(
    			type = text
				displayname = "Plan Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Selected_Plan_Code
			(
    			type = text
				displayname = "Selected Plan Code"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Price
			(
				type = USD
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
			Duration
			(
				type = number
	 			row = 1
	 			column = 1   
				width = medium
			)
			Plan_Type
			(
    			type = text
				displayname = "Plan Type"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Total_Cost
			(
				displayname = "Total Cost"
				type = USD
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
			DisplayImage
			(
				type = picklist	
				values  = DisplayImage.ID
    			displayformat = [Product_Name1]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "tech-2-sim-card"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		default list All_Subscriptions
		{
			displayName = "All Subscriptions"
			show all rows from Subscriptions    
			(
				Plan_Detail as "Plan Detail"
				Plan_Name as "Plan Name"
				Price
				Duration
				Plan_Type as "Plan Type"
				Total_Cost as "Total Cost"
				Selected_Plan_Code as "Selected Plan Code"
				Name as "Enter Name"
				Customers_Ids as "Customers Ids"
				Customer_Names as "Customer Names"
				DisplayImage
			)
			options
			(
				icon = "travel-world"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
						layout type = -1
						fields
						(
							Plan_Detail as "Plan Detail"
							Plan_Name as "Plan Name"
							Price
							Duration
							Plan_Type as "Plan Type"
							Selected_Plan_Code as "Selected Plan Code"
							Name as "Enter Name"
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
					record
					(
						Edit   	   
						Duplicate   	   
						Delete   	   
    				)
    			)
    			action
    			(
					on click
					(
						View Record   	   
    				)
					on right click
					(
						Edit   	   
						Delete   	   
						Duplicate   	   
						View Record   	   
    				)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
						layout type = -2
						fields
						(
							Plan_Detail as "Plan Detail"
							Plan_Name as "Plan Name"
							Price
							Duration
							Plan_Type as "Plan Type"
							Total_Cost as "Total Cost"
							Selected_Plan_Code as "Selected Plan Code"
							Name as "Enter Name"
							Customers_Ids as "Customers Ids"
							Customer_Names as "Customer Names"
							DisplayImage
						)
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section ToTestMail
	{
		icon = "tech-desktop"
		form ToTestMail
		{
			success message = "Data Added Successfully!"
			field alignment = left
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		default list ToTestMail_Report
		{
			displayName = "ToTestMail Report"
			show all rows from ToTestMail    
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
						layout type = -1
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
					record
					(
						Edit   	   
						Duplicate   	   
						Delete   	   
    				)
    			)
    			action
    			(
					on click
					(
						View Record   	   
    				)
					on right click
					(
						Edit   	   
						Delete   	   
						Duplicate   	   
						View Record   	   
    				)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
						layout type = -2
					)
				)
				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}


		 functions
		 {
			 Deluge
			 {
				 string createInvoice(string customerId, List selectedProductDetails)
         {
         	accessToken = thisapp.createOAuthAccessTokenFromRefreshToken("1000.c503665a532c843d9279a94a5dc3fee6.3e643b6f3e677ebfd5a924ccf17b411f","1000.0W30UDPD2H6DOTGA9P7GHWDYNEZ84E","66d1c1b29d67a14bf84fa577afcd92663eb5abba1e");
         	authorizationMap = Map();
         	authorizationMap.put("Authorization","Zoho-oauthtoken " + accessToken);
         	bodyMap = Map();
         	currentDate = thisapp.getCurrentDate();
         	bodyMap.put("customer_id",customerId);
         	thisapp.getCurrentDate();
         	bodyMap.put("date",currentDate);
         	// 	lineItemsList = List();
         	// 	itemDetailMap = Map();
         	// 	itemDetailMap.put("name","Silver Chain Design2");
         	// 	itemDetailMap.put("item_order",1);
         	// 	itemDetailMap.put("rate",2200);
         	// 	itemDetailMap.put("quantity",1);
         	// 	itemDetailMap.put("unit","g");
         	// 	itemDetailMap.put("item_total",2200);
         	// 	lineItemsList.add(itemDetailMap);
         	bodyMap.put("line_items",selectedProductDetails);
         	response = invokeurl
         	[
         		url :"https://zohoapis.localzoho.com/invoice/v3/invoices?organization_id=78162318"
         		type :POST
         		parameters:bodyMap.toString()
         		headers:authorizationMap
         	];
         	info response.get("message");
         	return response.get("message");
         }
				 string createOAuthAccessTokenFromRefreshToken(string refreshToken, string clientId, string clientSecret)
         {
         	info "https://accounts.localzoho.com/oauth/v2/token?refresh_token=" + refreshToken + "&client_id=" + clientId + "&client_secret=" + clientSecret + "&grant_type=refresh_token";
         	response = invokeurl
         	[
         		url :"https://accounts.localzoho.com/oauth/v2/token?refresh_token=" + refreshToken + "&client_id=" + clientId + "&client_secret=" + clientSecret + "&grant_type=refresh_token"
         		type :POST
         	];
         	info response;
         	accessToken = response.get("access_token");
         	info accessToken;
         	return accessToken;
         }
				 string createSubscription(map planDetails)
         {
         	info "createSubscription called";
         	accessToken = thisapp.createOAuthAccessTokenFromRefreshToken("1000.58729b2067fab6cf77f4fbcccab07a59.05a093a1906774b218532c04e2252f85","1000.0W30UDPD2H6DOTGA9P7GHWDYNEZ84E","66d1c1b29d67a14bf84fa577afcd92663eb5abba1e");
         	authorizationMap = Map();
         	authorizationMap.put("Authorization","Zoho-oauthtoken " + accessToken);
         	response = invokeurl
         	[
         		url :"https://zohoapis.localzoho.com/subscriptions/v1/subscriptions?organization_id=78464496"
         		type :POST
         		parameters:planDetails.toString()
         		headers:authorizationMap
         	];
         	info response.get("message");
         	return response.get("message");
         }
				 string getCurrentDate()
         {
         	return today.toString("yyyy-MM-dd");
         }
				 string getImage(int id)
         {
         	info id;
         	fet = DisplayImage[ID == id];
         	var = fet.Product_Image1.getSuffix("downqual = \"").getSuffix("image/").getPrefix("\"");
         	img = "https://creatorexport.zoho.com/file/latha.p_zohotest/ImageList/DisplayImage_Report/" + fet.ID + "/<Product_Image1>/image-download?filepath=/" + var;
         	info img;
         	return img;
         }
				 void sayHello()
         {
         	info "sayHello";
         	response = AddToCartDetailForm[ID != 0];
         	info response;
         }
				 void showProductDetails(string productDetails)
         {
         	productDetailsList = productDetails.toList("&");
         	productDetailsMap = Map();
         	for each  productDetail in productDetailsList
         	{
         		productDetailList = productDetail.toList("=");
         		productDetailsMap.put(productDetailList.get(0),productDetailList.get(1));
         	}
         	info productDetailsMap;
         	thisapp.sayHello();
         }
				 void testLineBreak()
         {
         	message = "Hi";
         	message = message + "! \nwelcome you";
         	info message;
         }
			 }
		 }




		workflow
		{
		form
		{
			CalculateTotalAmount as "CalculateTotalAmount"
			{
				type =  form
				form = DisplayImage
				record event = on add or edit

				on user input of Total_Product_Cost1
				{
					actions 
					{
						custom deluge script
						(
											if(input.Product_Gram1 != null && input.Cost_Per_Gram1 != null)
										{
											input.Total_Product_Cost1 = input.Product_Gram1 * input.Cost_Per_Gram1;
										}
						)
					}
				}

			}
			selectProductNames as "selectProductNames"
			{
				type =  form
				form = DisplaySelectedItems
				record event = on add or edit

				on validate
				{
					actions 
					{
						custom deluge script
						(
											// fetchJewellsDetails = DisplayImage[ID != 0];
										// productsList = List();
										// productsNameList = List();
										// for each  jewellDetail in fetchJewellsDetails
										// {
										// 	productMap = Map();
										// 	productMap.put("name",jewellDetail.Product_Name1);
										// 	productMap.put("rate",jewellDetail.Total_Product_Cost1);
										// 	productMap.put("quantity",1);
										// 	productMap.put("item_total",jewellDetail.Total_Product_Cost1);
										// 	productsList.add(productMap);
										// 	productsNameList.add(jewellDetail.Product_Name1);
										// }
										// info productsList;
										// productNames = DisplayImage[ID == input.DispalyProductNames];
										// selectedProductDetails = List();
										// for each  productDetail in productNames
										// {
										// 	selectedProductDetails.add(productsList.get(productsNameList.indexOf(productDetail.Product_Name1)));
										// }
										// info selectedProductDetails;
										// customerId = input.Dropdown;
										// info customerId;
										// thisapp.createInvoice(customerId,selectedProductDetails);
										productsList = List();
										productsNameList = List();
										customerID = input.Select_Customer_ID;
										for each  eachRow in SubForm
										{
											if(eachRow.Product_Quantity == 0)
											{
												alert "Must enter product quantity";
												cancel submit;
											}
											else
											{
												productMap = Map();
												productMap.put("name",eachRow.Product_Name);
												productMap.put("rate",eachRow.Product_Cost);
												productMap.put("quantity",eachRow.Product_Quantity);
												productMap.put("item_total",eachRow.Product_Cost * eachRow.Product_Quantity);
												productsList.add(productMap);
												productsNameList.add(eachRow.Product_Name);
											}
										}
										responseMessage = thisapp.createInvoice(customerID,productsList);
										if(responseMessage.equalsIgnoreCase("The invoice has been created."))
										{
											recordId = List();
											for each  retriveRecord in AddToCartDetailForm[ID != 0]
											{
												if(productsNameList.contains(retriveRecord.Product_Name))
												{
													recordId.add(retriveRecord.ID);
												}
											}
											delete from AddToCartDetailForm[ID in recordId];
											info responseMessage;
										}
						)
					}
				}

			}
			GetCustomerIds as "GetCustomerIds"
			{
				type =  form
				form = DisplaySelectedItems
				record event = on add

				on load
				{
					actions 
					{
						custom deluge script
						(
											authorizationMap = Map();
										accessToken = thisapp.createOAuthAccessTokenFromRefreshToken("1000.c503665a532c843d9279a94a5dc3fee6.3e643b6f3e677ebfd5a924ccf17b411f","1000.0W30UDPD2H6DOTGA9P7GHWDYNEZ84E","66d1c1b29d67a14bf84fa577afcd92663eb5abba1e");
										alert accessToken;
										authorizationMap.put("Authorization","Zoho-oauthtoken " + accessToken);
										authorizationMap.put("X-com-zoho-invoice-organizationid","78162318");
										response = invokeurl
										[
											url :"https://zohoapis.localzoho.com/invoice/v3/customers"
											type :GET
											headers:authorizationMap
										];
										alert response;
										contactsDetails = response.get("contacts");
										contactsIdList = List();
										for each  contactDetails in contactsDetails
										{
											contactsIdList.add(contactDetails.get("contact_id"));
										}
										alert contactsIdList;
										for each  contactId in contactsIdList
										{
											input.Select_Customer_ID:ui.add(contactId);
										}
						)
					}
				}

			}
			checkFieldValue as "checkFieldValue"
			{
				type =  form
				form = CardSubForm
				record event = on add

				on validate
				{
					actions 
					{
						custom deluge script
						(
											if(input.Sub_Form_Fields1.count() == 0)
										{
											info input.Sub_Form_Fields1.count();
											cancel submit;
										}
						)
					}
				}

			}
			toHideSubFormWhenFormLoad as "toHideSubFormWhenFormLoad"
			{
				type =  form
				form = CardSubForm
				record event = on add

				on load
				{
					actions 
					{
						custom deluge script
						(
											
						)
					}
				}

			}
			clearRecords as "clearRecords"
			{
				type =  form
				form = AddToCartDetailForm
				record event = on add

				on load
				{
					actions 
					{
						custom deluge script
						(
											// delete from AddToCartDetailForm[ID != 0];
						)
					}
				}

			}
			LoadAddToCardValue as "LoadAddToCardValue"
			{
				type =  form
				form = DisplaySelectedItems
				record event = on add

				on load
				{
					actions 
					{
						custom deluge script
						(
											// addToCartValues = AddToCartDetailForm[ID != 0];
										// recordListID = list();
										// recordList = list();
										// duplicateRecordList = list();
										// for each  record in addToCartValues
										// {
										// 	if(recordList.contains(record.Single_Line))
										// 	{
										// 		duplicateRecordList.add(record.ID);
										// 		//info record.Single_Line;
										// 	}
										// 	else
										// 	{
										// 		recordList.add(record.Single_Line);
										// 		recordListID.add(record.ID);
										// 		//info record.Single_Line;
										// 	}
										// }
										// delete from AddToCartDetailForm[ID in duplicateRecordList];
										// for each  addToCartValue in recordList
										// {
										// 	input.Dropdown1:ui.add(addToCartValue);
										// }
										addToCartValues = AddToCartDetailForm[ID != 0];
										totalInvoiceAmount = 0;
										for each  addToCartValue in addToCartValues
										{
											rowValue = DisplaySelectedItems.SubForm();
											rowValue.Product_Name=addToCartValue.Product_Name;
											rowValue.Product_Gram=addToCartValue.Product_Gram;
											rowValue.Cost_Per_Gram=addToCartValue.Cost_Per_Gram;
											rowValue.Product_Cost=addToCartValue.Product_Cost;
											rowValue.Product_Quantity=1;
											rowValue.Total_Product_Cost=addToCartValue.Product_Cost;
											totalInvoiceAmount = totalInvoiceAmount + addToCartValue.Product_Cost;
											rowCollection = Collection();
											rowCollection.insert(rowValue);
											input.SubForm.insert(rowCollection);
										}
										input.Total_Invoice_Amount = totalInvoiceAmount;
						)
					}
				}

			}
			New_Order_Load_Product_Na as "New Order Load Product Name"
			{
				type =  form
				form = New_Order
				record event = on add

				on user input of DisplayImage
				{
					actions 
					{
						custom deluge script
						(
											img = DisplayImage[ID == input.DisplayImage].Product_Image1;
										alert img;
										if(img != null)
										{
											img = img.replaceAll("/sharedBy/appLinkName/",zoho.appuri);
											img = img.replaceAll("viewLinkName","DisplayImage_Report");
											img = img.replaceAll("fieldName","Product_Image1");
											img = img.replaceAll("<img","<img height = 100px width = 100px");
											input.plain = img;
										}
						)
					}
				}

			}
			checkProductName as "checkProductName"
			{
				type =  form
				form = DisplayImage
				record event = on add

				on validate
				{
					actions 
					{
						custom deluge script
						(
											retriveValues = DisplayImage[Product_Name1 == input.Product_Name1].Product_Name1;
										if(retriveValues == input.Product_Name1)
										{
											alert "Product name is already added";
											cancel submit;
										}
										// retriveValues = DisplayImage[ID != 0];
										// product_Name = list();
										// for each  retriveValue in retriveValues
										// {
										// 	product_Name.add(retriveValue.Product_Name1);
										// }
										// if(product_Name.contains(input.Product_Name1))
										// {
										// 	alert "Product name is already added";
										// 	cancel submit;
										// }
						)
					}
				}

			}
			calculateTotalProductAmou as "calculateTotalProductAmount"
			{
				type =  form
				form = DisplaySelectedItems
				record event = on add

				on user input of SubForm.Product_Quantity
				{
					actions 
					{
						custom deluge script
						(
											row.Total_Product_Cost=row.Product_Quantity * row.Total_Product_Cost;
										totalInvoiceAmount = 0;
										for each  eachRow in SubForm
										{
											totalInvoiceAmount = totalInvoiceAmount + eachRow.Total_Product_Cost;
										}
										input.Total_Invoice_Amount = totalInvoiceAmount;
						)
					}
				}

			}
			userInputOfProductQuantit as "userInputOfProductQuantity"
			{
				type =  form
				form = DisplaySelectedItems
				record event = on add

				on user input of SubForm.Product_Quantity
				{
					actions 
					{
						custom deluge script
						(
											row.Total_Product_Cost=row.Product_Quantity * row.Product_Cost;
										totalInvoiceAmount = 0;
										for each  rowValue in SubForm
										{
											totalInvoiceAmount = totalInvoiceAmount + rowValue.Total_Product_Cost;
										}
										input.Total_Invoice_Amount = totalInvoiceAmount;
						)
					}
				}

			}
			calculateInvoiceAmountWhe as "calculateInvoiceAmountWhenTheRowIsDeleted"
			{
				type =  form
				form = DisplaySelectedItems
				record event = on add

				on delete row of SubForm
				{
					actions 
					{
						custom deluge script
						(
											totalInvoiceAmount = 0;
										deletedProductCost = row.Total_Product_Cost;
										for each  eachRow in SubForm
										{
											totalInvoiceAmount = totalInvoiceAmount + eachRow.Total_Product_Cost;
										}
										input.Total_Invoice_Amount = totalInvoiceAmount - deletedProductCost;
						)
					}
				}

			}
			calculateInvoiceAmountWhe1 as "calculateInvoiceAmountWhenTheRowIsAdded"
			{
				type =  form
				form = DisplaySelectedItems
				record event = on add

				on add row of SubForm
				{
					actions 
					{
						custom deluge script
						(
											totalInvoiceAmount = 0;
										for each  eachRow in SubForm
										{
											totalInvoiceAmount = totalInvoiceAmount + eachRow.Total_Product_Cost;
										}
										input.Total_Invoice_Amount = totalInvoiceAmount;
						)
					}
				}

			}
			disableTotalProductCost as "disableTotalProductCost"
			{
				type =  form
				form = DisplayImage
				record event = on add

				on load
				{
					actions 
					{
						custom deluge script
						(
											//disable Total_Product_Cost1;
						)
					}
				}

			}
			LoadCustomerId as "LoadCustomerId"
			{
				type =  form
				form = Subscriptions
				record event = on add

				on load
				{
					actions 
					{
						custom deluge script
						(
											authorizationMap = Map();
										accessToken = thisapp.createOAuthAccessTokenFromRefreshToken("1000.58729b2067fab6cf77f4fbcccab07a59.05a093a1906774b218532c04e2252f85","1000.0W30UDPD2H6DOTGA9P7GHWDYNEZ84E","66d1c1b29d67a14bf84fa577afcd92663eb5abba1e");
										authorizationMap.put("Authorization","Zoho-oauthtoken " + accessToken);
										authorizationMap.put("X-com-zoho-subscriptions-organizationid","78464496");
										response = invokeurl
										[
											url :"https://zohoapis.localzoho.com/subscriptions/v1/customers"
											type :GET
											headers:authorizationMap
										];
										alert response;
										contactsDetails = response.get("customers");
										contactsIdList = List();
										contactsNameList = List();
										for each  contactDetails in contactsDetails
										{
											contactsIdList.add(contactDetails.get("customer_id"));
											input.Customers_Ids:ui.add(contactDetails.get("customer_id"));
											input.Customer_Names:ui.add(contactDetails.get("display_name"));
											//input.Subscriptions:ui.add(contactDetails.get("display_name"));
										}
										// for each  contactId in contactsIdList
										// {
										// 	info contactId;
										// }
										disable Plan_Name;
										disable Selected_Plan_Code;
										disable Price;
										disable Duration;
										disable Plan_Type;
										disable Total_Cost;
										dummyList = rightpad("",27).toList("");
										info dummyList;
										user = Map();
										name = user.get("name");
										alert name.get("first");
										// hide Customers_Ids;
										// hide Customer_Names;
						)
					}
				}

			}
			LoadSelectedPlanDetails as "LoadSelectedPlanDetails"
			{
				type =  form
				form = Subscriptions
				record event = on add

				on user input of Plan_Detail
				{
					actions 
					{
						custom deluge script
						(
											planCode = input.Plan_Detail;
										id = PlanDetail[ID == planCode];
										// img = PlanDetail[ID == id].Item_Image1;
										// if(img != null)
										// {
										// 	img = img.replaceAll("/sharedBy/appLinkName/",zoho.appuri);
										// 	img = img.replaceAll("viewLinkName","PlanDetail_Report");
										// 	img = img.replaceAll("fieldName","Item_Image1");
										// 	img = img.replaceAll("<img","<img height = 100px width = 100px");
										// 	input.plain = img;
										// }
										// alert img;
										// rowValue = Subscriptions.SubForm();
										// rowValue.Plan_Name=id.Plan_Name1;
										// rowValue.Plan_Code=id.Plan_Code1;
										// rowValue.Price=id.Price1;
										// rowValue.Duration1=id.Duration1;
										// rowValue.Plan_Type=id.Plan_Type1;
										// rowValue.Total_Cost=id.Price1 * id.Duration1;
										// rowCollection = Collection();
										// rowCollection.insert(rowValue);
										// input.SubForm.insert(rowCollection);
										input.Plan_Name = id.Plan_Name1;
										input.Selected_Plan_Code = id.Plan_Code1;
										input.Price = id.Price1;
										input.Duration = id.Duration1;
										input.Plan_Type = id.Plan_Type1;
										input.Total_Cost = id.Duration1 * id.Price1;
						)
					}
				}

			}
			checkNameIsExists as "checkNameIsExists"
			{
				type =  form
				form = Subscriptions
				record event = on add

				on validate
				{
					actions 
					{
						custom deluge script
						(
											authorizationMap = Map();
										accessToken = thisapp.createOAuthAccessTokenFromRefreshToken("1000.58729b2067fab6cf77f4fbcccab07a59.05a093a1906774b218532c04e2252f85","1000.0W30UDPD2H6DOTGA9P7GHWDYNEZ84E","66d1c1b29d67a14bf84fa577afcd92663eb5abba1e");
										authorizationMap.put("Authorization","Zoho-oauthtoken " + accessToken);
										authorizationMap.put("X-com-zoho-subscriptions-organizationid","78464496");
										response = invokeurl
										[
											url :"https://zohoapis.localzoho.com/subscriptions/v1/customers"
											type :GET
											headers:authorizationMap
										];
										alert response;
										contactsDetails = response.get("customers");
										contactsIdList = List();
										contactsNameList = List();
										for each  contactDetails in contactsDetails
										{
											contactsIdList.add(contactDetails.get("customer_id"));
											contactsNameList.add(contactDetails.get("display_name"));
											// 	input.Customers_Ids:ui.add(contactDetails.get("customer_id"));
											//  input.Customer_Names:ui.add(contactDetails.get("display_name"));
										}
										if(contactsNameList.contains(input.Name) == false)
										{
											alert "Your contact was not found";
											cancel submit;
										}
										else
										{
											customerID = contactsIdList.get(contactsNameList.indexOf(input.Name));
											id = input.Selected_Plan_Code;
											price = input.Price;
											quantity = input.Duration;
											planAndCustomerDetailsMap = Map();
											planAndCustomerDetailsMap.put("customer_id",customerID);
											planDetailMap = Map();
											planDetailMap.put("plan_code",id);
											planDetailMap.put("price",price);
											planDetailMap.put("quantity",quantity);
											planAndCustomerDetailsMap.put("plan",planDetailMap);
											planAndCustomerDetailsMap.put("auto_collect",false);
											response = thisapp.createSubscription(planAndCustomerDetailsMap);
											info response;
										}
						)
					}
				}

			}
			sendMail as "sendMail"
			{
				type =  form
				form = ToTestMail
				record event = on add

				on success
				{
					actions 
					{
						custom deluge script
						(
											sendmail
										[
											from :zoho.loginuserid
											to :"latha.p@zohotest.com"
											cc:"latha.p@zohotest.com"
											subject :"Test mail"
											message :"Hi... latha"
										]
						)
					}
				}

			}
		}

		schedule
		{
			testScheduled as "testScheduled"
			{
				type =  schedule
				start = "2023-09-04 18:20:00"
				frequency = daily
				time zone = "Asia/Kolkata"
				on start
				{
					actions 
					{
					on load
					(
						sendmail
										[
											from :zoho.adminuserid
											to :"sathiya.jothi@zohotest.com"
											subject :"Test Scheduled"
											message :"Hi... sathiya"
										]
					)
					}
				}
			}
		}



		functions
		{
			testReportWorkflow as "testReportWorkflow"
			{
				type =  functions
				form = DisplayImage
				execution type = for each record	
				on start
				{
					actions 
					{
					on click
					(
						info "welcome";
					)
					}
				}
			}
			AddToCard as "AddToCard"
			{
				type =  functions
				form = DisplayImage
				execution type = for each record	
				on start
				{
					actions 
					{
					on click
					(
						itemsDetailsForOrder = list();
										fieldValue = DisplayImage[ID == input.ID];
										// insertResponse = insert into DisplaySelectedItems
										// [
										// 	Added_User=zoho.loginuser
										// 	Dropdown1=fieldValue.Product_Name1
										// ];
										// info insertResponse;
										retriveValues = AddToCartDetailForm[ID != 0];
										product_Name = list();
										for each  retriveValue in retriveValues
										{
											product_Name.add(retriveValue.Product_Name);
										}
										if(product_Name.contains(fieldValue.Product_Name1) == false)
										{
											insert into AddToCartDetailForm
											[
												Added_User=zoho.loginuser
												Product_Name=fieldValue.Product_Name1
												Product_Gram=fieldValue.Product_Gram1
												Cost_Per_Gram=fieldValue.Cost_Per_Gram1
												Product_Cost=fieldValue.Total_Product_Cost1
												Product_Image=fieldValue.Product_Image1
											]
										}
										AddToCartDetailValues = AddToCartDetailForm[ID != 0];
										info AddToCartDetailValues;
					)
					}
				}
			}
			RemoveItemFromCart as "RemoveItemFromCart"
			{
				type =  functions
				form = AddToCartDetailForm
				execution type = for each record	
				on start
				{
					actions 
					{
					on click
					(
						delete from AddToCartDetailForm[ID == input.ID];
					)
					}
				}
			}
		}
	}
	share_settings
	{
			"Read"
			{
				name = "Read"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "This profile will have read permission for all components\n"
			}
			"Write"
			{
				name = "Write"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "This profile will have write permission for all components\n"
			}
			"Administrator"
			{
				name = "Administrator"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "This profile will have all the permissions.\n"
			}
			"Customer"
			{
				name = "Customer"
				type = Customer_Portal
				permissions = {Chat:false, Predefined:true, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "This is the default profile having only add and view permission.\n"
			}
			roles
			{
				"CEO"
				{
					description = "User belonging to this role can access data of all other users."
				}
			}
	}

	customize
	{
		
		layout = "tab"
		color = "black"
		base theme = "professional"
		new theme = 1
		icons = true
		icons style = outline
		font = "lato"
		color options
    	{
        color = "1"
    	}
    	logo
    	{
        	preference = "none"
        	placement = "left"
    	}
	}


	phone
	{
		customize
		{
        	layout = slidingpane
		 	icons style = outline
        	font = "default"
            style = "3"
        	color options
        	{
             	color = lightred
         	}
         	logo
         	{
             	preference = "none"
         	}
		}
	}
	tablet
	{
		customize
		{
        	layout = slidingpane
		 	icons style = outline
        	font = "default"
            style = "3"
        	color options
        	{
             	color = lightred
         	}
         	logo
         	{
             	preference = "none"
         	}
		}
	}
	
}
